/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * OpenAPI spec version: 1.0.11
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetAllOrFilteredProductsParams,
  GetSearchedProductsParams,
  Product,
  SearchedProduct,
} from ".././products-model";

/**
 * Returns a list of products, optionally filtered by a price range using query parameters.
 * @summary Get products (optionally filtered by price)
 */
export type getAllOrFilteredProductsResponse = {
  data: Product[];
  status: number;
};

export const getGetAllOrFilteredProductsUrl = (
  params?: GetAllOrFilteredProductsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/server-side/products/filter?${normalizedParams.toString()}`
    : `http://localhost:8000/server-side/products/filter`;
};

export const getAllOrFilteredProducts = async (
  params?: GetAllOrFilteredProductsParams,
  options?: RequestInit,
): Promise<getAllOrFilteredProductsResponse> => {
  const res = await fetch(getGetAllOrFilteredProductsUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetAllOrFilteredProductsQueryKey = (
  params?: GetAllOrFilteredProductsParams,
) => {
  return [
    `http://localhost:8000/server-side/products/filter`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAllOrFilteredProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
  TError = void,
>(
  params?: GetAllOrFilteredProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllOrFilteredProductsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllOrFilteredProducts>>
  > = ({ signal }) =>
    getAllOrFilteredProducts(params, { signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllOrFilteredProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllOrFilteredProducts>>
>;
export type GetAllOrFilteredProductsQueryError = void;

export function useGetAllOrFilteredProducts<
  TData = Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
  TError = void,
>(
  params: undefined | GetAllOrFilteredProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllOrFilteredProducts<
  TData = Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
  TError = void,
>(
  params?: GetAllOrFilteredProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllOrFilteredProducts<
  TData = Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
  TError = void,
>(
  params?: GetAllOrFilteredProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get products (optionally filtered by price)
 */

export function useGetAllOrFilteredProducts<
  TData = Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
  TError = void,
>(
  params?: GetAllOrFilteredProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllOrFilteredProducts>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllOrFilteredProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get one product by his ID(ObjetID in MongoDB)
 * @summary Get one product
 */
export type getOneProductResponse = {
  data: SearchedProduct[];
  status: number;
};

export const getGetOneProductUrl = (productId: string) => {
  return `http://localhost:8000/server-side/product/${productId}`;
};

export const getOneProduct = async (
  productId: string,
  options?: RequestInit,
): Promise<getOneProductResponse> => {
  const res = await fetch(getGetOneProductUrl(productId), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetOneProductQueryKey = (productId: string) => {
  return [`http://localhost:8000/server-side/product/${productId}`] as const;
};

export const getGetOneProductQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneProduct>>,
  TError = void,
>(
  productId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneProduct>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOneProductQueryKey(productId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneProduct>>> = ({
    signal,
  }) => getOneProduct(productId, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!productId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneProduct>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetOneProductQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneProduct>>
>;
export type GetOneProductQueryError = void;

export function useGetOneProduct<
  TData = Awaited<ReturnType<typeof getOneProduct>>,
  TError = void,
>(
  productId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneProduct>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneProduct>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOneProduct<
  TData = Awaited<ReturnType<typeof getOneProduct>>,
  TError = void,
>(
  productId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneProduct>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneProduct>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOneProduct<
  TData = Awaited<ReturnType<typeof getOneProduct>>,
  TError = void,
>(
  productId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneProduct>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get one product
 */

export function useGetOneProduct<
  TData = Awaited<ReturnType<typeof getOneProduct>>,
  TError = void,
>(
  productId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneProduct>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetOneProductQueryOptions(productId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of products with some fields(mainImg and name), found by text from CatalogInput by name/category.name/brand fields
 * @summary Get products by searching by text from CatalogInput
 */
export type getSearchedProductsResponse = {
  data: Product[];
  status: number;
};

export const getGetSearchedProductsUrl = (
  params: GetSearchedProductsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:8000/server-side/products-search?${normalizedParams.toString()}`
    : `http://localhost:8000/server-side/products-search`;
};

export const getSearchedProducts = async (
  params: GetSearchedProductsParams,
  options?: RequestInit,
): Promise<getSearchedProductsResponse> => {
  const res = await fetch(getGetSearchedProductsUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export const getGetSearchedProductsQueryKey = (
  params: GetSearchedProductsParams,
) => {
  return [
    `http://localhost:8000/server-side/products-search`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetSearchedProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSearchedProducts>>,
  TError = void,
>(
  params: GetSearchedProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchedProducts>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSearchedProductsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSearchedProducts>>
  > = ({ signal }) => getSearchedProducts(params, { signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSearchedProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSearchedProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSearchedProducts>>
>;
export type GetSearchedProductsQueryError = void;

export function useGetSearchedProducts<
  TData = Awaited<ReturnType<typeof getSearchedProducts>>,
  TError = void,
>(
  params: GetSearchedProductsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchedProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSearchedProducts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetSearchedProducts<
  TData = Awaited<ReturnType<typeof getSearchedProducts>>,
  TError = void,
>(
  params: GetSearchedProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchedProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSearchedProducts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetSearchedProducts<
  TData = Awaited<ReturnType<typeof getSearchedProducts>>,
  TError = void,
>(
  params: GetSearchedProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchedProducts>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get products by searching by text from CatalogInput
 */

export function useGetSearchedProducts<
  TData = Awaited<ReturnType<typeof getSearchedProducts>>,
  TError = void,
>(
  params: GetSearchedProductsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSearchedProducts>>,
        TError,
        TData
      >
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetSearchedProductsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
